package io.fabric8.launcher.osio.steps;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;

import io.fabric8.kubernetes.api.KubernetesHelper;
import io.fabric8.launcher.osio.Annotations;
import io.fabric8.launcher.osio.che.CheStack;
import io.fabric8.launcher.osio.che.CheStackDetector;
import io.fabric8.launcher.osio.projectiles.OsioProjectile;
import io.fabric8.launcher.osio.tenant.Namespace;
import io.fabric8.launcher.osio.tenant.Tenant;
import io.fabric8.launcher.service.openshift.api.OpenShiftService;
import io.fabric8.openshift.api.model.Build;
import io.fabric8.openshift.api.model.BuildRequest;
import io.fabric8.openshift.api.model.BuildRequestBuilder;
import io.fabric8.openshift.client.OpenShiftClient;

/**
 * @author <a href="mailto:ggastald@redhat.com">George Gastaldi</a>
 */
@RequestScoped
public class OpenShiftSteps {

    private static Logger log = Logger.getLogger(OpenShiftSteps.class.getName());

    @Inject
    private OpenShiftService openShiftService;

    @Inject
    private Tenant tenant;


    public void createBuildConfig(OsioProjectile projectile) {
        Map<String, String> annotations = getBuildConfigAnnotations(projectile);

    }


    public void triggerBuild(OsioProjectile projectile) {
        Namespace namespace = tenant.getDefaultUserNamespace();
        String triggeredBuildName;
        BuildRequest request = new BuildRequestBuilder().
                withNewMetadata().withName(projectile.getOpenShiftProjectName()).endMetadata().
                addNewTriggeredBy().withMessage("Forge triggered").endTriggeredBy().
                build();
        try {
            OpenShiftClient openShiftClient = openShiftService.getOpenShiftClient();
            Build build = openShiftClient.buildConfigs().inNamespace(namespace.getName())
                    .withName(projectile.getOpenShiftProjectName()).instantiate(request);
            if (build != null) {
                triggeredBuildName = KubernetesHelper.getName(build);
                log.info("Triggered build " + triggeredBuildName);
                return;
            } else {
                log.severe("Failed to trigger build for " + namespace + "/" + projectile.getOpenShiftProjectName() + " due to: no Build returned");
            }
        } catch (Exception e) {
            log.log(Level.SEVERE, "Failed to trigger build for " + namespace + "/" + projectile.getOpenShiftProjectName() + " due to: " + e, e);
        }
    }

    private Map<String, String> getBuildConfigAnnotations(OsioProjectile projectile) {
        Map<String, String> annotations = new HashMap<>();
        // lets add the annotations so that it looks like its generated by jenkins-sync plugin to minimise duplication
        annotations.put(Annotations.JENKINS_GENERATED_BY, "jenkins");
        annotations.put(Annotations.JENKINS_JOB_PATH, tenant.getUsername() + "/" + projectile.getGitRepositoryName() + "/master");
        CheStack cheStack = CheStackDetector.detectCheStack(projectile.getProjectLocation());
        if (cheStack != null) {
            annotations.put(Annotations.CHE_STACK, cheStack.getId());
        }
        // lets disable jenkins-sync plugin creating the BC as well to avoid possible duplicate
        annotations.put(Annotations.JENKINS_DISABLE_SYNC_CREATE_ON, "jenkins");
        return annotations;
    }

}
